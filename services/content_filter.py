"""
Content Filter v√† Duplicate Detection System
H·ªá th·ªëng l·ªçc n·ªôi dung v√† ph√°t hi·ªán tr√πng l·∫∑p video
"""

import sqlite3
import re
from datetime import datetime
from difflib import SequenceMatcher
import config


class ContentFilter:
    """H·ªá th·ªëng l·ªçc v√† ki·ªÉm tra tr√πng l·∫∑p video"""
    
    def __init__(self):
        print("üîß Content Filter initialized")
    
    def calculate_text_similarity(self, text1, text2):
        """T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa 2 chu·ªói text"""
        # Normalize text
        text1 = self.normalize_text(text1)
        text2 = self.normalize_text(text2)
        
        # Calculate similarity using SequenceMatcher
        similarity = SequenceMatcher(None, text1, text2).ratio()
        return similarity
    
    def normalize_text(self, text):
        """Chu·∫©n h√≥a text ƒë·ªÉ so s√°nh"""
        if not text:
            return ""
        
        # Convert to lowercase
        text = text.lower()
        
        # Remove extra spaces and special characters
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    def extract_movie_name(self, title):
        """Tr√≠ch xu·∫•t t√™n phim t·ª´ ti√™u ƒë·ªÅ review"""
        title = title.lower()
        
        # Remove common prefixes
        prefixes = ['review', 'ƒë√°nh gi√°', 'review phim', 'phim', 'critique', 'vus review', 'vus']
        for prefix in prefixes:
            if title.startswith(prefix):
                title = title[len(prefix):].strip()
        
        # Extract movie name (before dash or colon)
        if ':' in title:
            title = title.split(':')[0].strip()
        elif '-' in title:
            title = title.split('-')[0].strip()
        
        # Clean up
        title = re.sub(r'[^\w\s]', ' ', title)
        title = re.sub(r'\s+', ' ', title).strip()
        
        return title.title()
    
    def is_duplicate_video(self, new_video, existing_videos):
        """Ki·ªÉm tra xem video m·ªõi c√≥ tr√πng v·ªõi video ƒë√£ c√≥ kh√¥ng"""
        new_title = new_video.get('title', '')
        new_video_id = new_video.get('video_id', '')
        new_channel = new_video.get('channel_title', '')
        new_desc = new_video.get('description', '')
        
        new_movie = self.extract_movie_name(new_title)
        
        for existing in existing_videos:
            # If it's from database (tuple format)
            if isinstance(existing, tuple) and len(existing) >= 7:
                existing_title = existing[1]  # title
                existing_video_id = existing[6]  # video_id
                existing_channel = existing[3]  # reviewer_name
                existing_desc = existing[7] if len(existing) > 7 else ""  # description
            # If it's from video list (dict format)
            elif isinstance(existing, dict):
                existing_title = existing.get('title', '')
                existing_video_id = existing.get('video_id', '')
                existing_channel = existing.get('channel_title', '')
                existing_desc = existing.get('description', '')
            else:
                continue
            
            # Check exact video ID match first
            if new_video_id and existing_video_id and new_video_id == existing_video_id:
                print(f"üö´ Duplicate detected - Same video ID: {new_video_id}")
                return True
            
            # Calculate similarities
            title_similarity = self.calculate_text_similarity(new_title, existing_title)
            desc_similarity = self.calculate_text_similarity(new_desc, existing_desc)
            
            existing_movie = self.extract_movie_name(existing_title)
            movie_similarity = self.calculate_text_similarity(new_movie, existing_movie)
            
            same_channel = new_channel.lower() == existing_channel.lower() if new_channel and existing_channel else False
            
            is_duplicate = False
            
            # Very high title similarity
            if title_similarity > config.TITLE_SIMILARITY_THRESHOLD:
                is_duplicate = True
                print(f"üö´ Duplicate detected - High title similarity: {title_similarity:.2f}")
            
            # Same movie + same channel
            elif movie_similarity > 0.8 and same_channel:
                is_duplicate = True
                print(f"üö´ Duplicate detected - Same movie ({movie_similarity:.2f}) + Same channel")
            
            # High description similarity
            elif desc_similarity > config.SIMILARITY_THRESHOLD:
                is_duplicate = True
                print(f"üö´ Duplicate detected - High description similarity: {desc_similarity:.2f}")
            
            # Multiple moderate similarities
            elif (title_similarity > 0.6 and movie_similarity > 0.7) or \
                 (title_similarity > 0.6 and desc_similarity > 0.6):
                is_duplicate = True
                print(f"üö´ Duplicate detected - Multiple similarities (T:{title_similarity:.2f}, M:{movie_similarity:.2f}, D:{desc_similarity:.2f})")
            
            if is_duplicate:
                print(f"   New: {new_title[:50]}...")
                print(f"   Existing: {existing_title[:50]}...")
                return True
        
        return False
    
    def get_existing_videos_from_db(self):
        """L·∫•y danh s√°ch video ƒë√£ c√≥ trong database"""
        try:
            conn = sqlite3.connect(config.DATABASE_PATH)
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM video_reviews ORDER BY created_at DESC LIMIT 1000")
            videos = cursor.fetchall()
            
            conn.close()
            return videos
            
        except Exception as e:
            print(f"‚ùå Error getting existing videos: {e}")
            return []
    
    def filter_duplicates(self, new_videos):
        """L·ªçc b·ªè video tr√πng l·∫∑p t·ª´ danh s√°ch videos m·ªõi"""
        print(f"üîç Filtering duplicates from {len(new_videos)} new videos...")
        
        # Get existing videos from database
        existing_videos = self.get_existing_videos_from_db()
        print(f"üìä Comparing against {len(existing_videos)} existing videos")
        
        filtered_videos = []
        duplicate_count = 0
        
        for i, video in enumerate(new_videos):
            print(f"\n‚ö° Checking video {i+1}/{len(new_videos)}: {video['title'][:50]}...")
            
            # Check against existing videos
            if not self.is_duplicate_video(video, existing_videos):
                # Also check against other new videos (avoid duplicates within the same batch)
                if not self.is_duplicate_video(video, filtered_videos):
                    filtered_videos.append(video)
                    print(f"‚úÖ Video accepted")
                else:
                    duplicate_count += 1
                    print(f"üö´ Duplicate within new batch")
            else:
                duplicate_count += 1
        
        print(f"\nüìä Filtering results:")
        print(f"   Original: {len(new_videos)} videos")
        print(f"   Filtered: {len(filtered_videos)} videos")
        print(f"   Duplicates removed: {duplicate_count} videos")
        
        return filtered_videos
    
    def is_movie_review_video(self, video):
        """Ki·ªÉm tra xem video c√≥ ph·∫£i l√† review phim (bao g·ªìm Vus Review) kh√¥ng"""
        title = video.get('title', '').lower()
        description = video.get('description', '').lower()
        combined_text = f"{title} {description}"
        
        # C√°c t·ª´ kh√≥a t√≠ch c·ª±c cho review phim (bao g·ªìm Vus Review)
        review_keywords = [
            'review', 'ƒë√°nh gi√°', 'nh·∫≠n x√©t', 'ph√¢n t√≠ch', 'critique',
            'review phim', 'ƒë√°nh gi√° phim', 'phim hay', 'phim m·ªõi',
            'spoiler', 'trailer reaction', 'breakdown', 'ending explained',
            't√≥m t·∫Øt phim', 'gi·∫£i th√≠ch phim', 'k·∫øt th√∫c phim',
            # Th√™m Vus Review keywords
            'vus', 'vus review', 'vus ƒë√°nh gi√°', 'vus phim', 'vus cinema',
            'vus trailer', 'vus movie', 'vus film', 'vus spoiler',
            'vus breakdown', 'vus ending', 'vus reaction'
        ]
        
        # C√°c t·ª´ kh√≥a phim ·∫£nh
        movie_keywords = [
            'phim', 'movie', 'film', 'cinema', 't·∫≠p', 'episode', 'season',
            'marvel', 'dc', 'disney', 'netflix', 'hollywood', 'bollywood',
            'anime', 'drama', 'series', 'thriller', 'horror', 'comedy',
            'action', 'romance', 'sci-fi'
        ]
        
        # Ki·ªÉm tra c√≥ t·ª´ kh√≥a review v√† phim
        has_review_keyword = any(keyword in combined_text for keyword in review_keywords)
        has_movie_keyword = any(keyword in combined_text for keyword in movie_keywords)
        
        # V·∫´n gi·ªØ logic lo·∫°i tr·ª´ c√°c video kh√¥ng ph√π h·ª£p nh∆∞ng ƒëi·ªÅu ch·ªânh cho Vus
        excluded_keywords = [
            'trailer ch√≠nh th·ª©c', 'official trailer', 'teaser',
            'behind the scene', 'making of', 'gala', 'th·∫£m ƒë·ªè',
            'interview', 'h·∫≠u tr∆∞·ªùng', 'news', 'tin t·ª©c',
            r'\bgame\b', r'\bgameplay\b', r'\bwalkthrough\b', r'\bspeedrun\b',  # Word boundaries ƒë·ªÉ tr√°nh false positive
            'music video', 'mv', 'live stream',
            'unboxing', 'vlog', 'daily',
            'reaction only'
        ]
        
        # Check excluded keywords with regex for word boundaries
        has_excluded = False
        for keyword in excluded_keywords:
            if keyword.startswith(r'\b') and keyword.endswith(r'\b'):
                # Use regex for word boundary check
                import re
                if re.search(keyword, combined_text):
                    has_excluded = True
                    break
            else:
                # Normal substring check
                if keyword in combined_text:
                    has_excluded = True
                    break
        
        # K·∫øt qu·∫£: ph·∫£i c√≥ t·ª´ kh√≥a review V√Ä phim, v√† KH√îNG c√≥ t·ª´ kh√≥a lo·∫°i tr·ª´
        is_movie_review = has_review_keyword and has_movie_keyword and not has_excluded
        
        if not is_movie_review:
            reason = []
            if not has_review_keyword:
                reason.append("no review keywords")
            if not has_movie_keyword:
                reason.append("no movie keywords")
            if has_excluded:
                reason.append("has excluded keywords")
            print(f"‚ùå Not a movie review: {' + '.join(reason)}")
        
        return is_movie_review

    def validate_video_quality(self, video):
        """Ki·ªÉm tra ch·∫•t l∆∞·ª£ng video tr∆∞·ªõc khi th√™m"""
        issues = []
        
        # Check if it's a movie review video first
        if not self.is_movie_review_video(video):
            issues.append('Not a movie review video')
        
        # Check title length
        if len(video['title']) < 10:
            issues.append('Title too short')
        
        # Check if has movie title
        movie_title = self.extract_movie_name(video['title'])
        if len(movie_title) < 2:
            issues.append('Cannot extract movie name')
        
        # Check view count
        if video.get('view_count', 0) < config.MIN_VIEWS:
            issues.append(f'Low view count: {video.get("view_count", 0)}')
        
        # Check duration - gi·ªØ min 10 ph√∫t, b·ªè gi·ªõi h·∫°n max
        duration = video.get('duration', 0)
        if duration < config.MIN_VIDEO_DURATION:
            issues.append(f'Too short: {duration}s (minimum {config.MIN_VIDEO_DURATION}s)')
        # B·ªè check max duration v√¨ MAX_VIDEO_DURATION = 0 (unlimited)
        if config.MAX_VIDEO_DURATION > 0 and duration > config.MAX_VIDEO_DURATION:
            issues.append(f'Too long: {duration}s (maximum {config.MAX_VIDEO_DURATION}s)')
        
        # Check channel name
        if not video.get('channel_title'):
            issues.append('Missing channel name')
        
        if issues:
            print(f"‚ö†Ô∏è Quality issues for '{video['title'][:30]}...': {', '.join(issues)}")
            return False
        
        return True
    
    def process_videos(self, videos):
        """Main method ƒë·ªÉ x·ª≠ l√Ω v√† l·ªçc videos"""
        print(f"\nüéØ Processing {len(videos)} videos...")
        
        # Step 1: Validate quality
        print("\nüìã Step 1: Quality validation...")
        quality_videos = []
        for video in videos:
            if self.validate_video_quality(video):
                quality_videos.append(video)
        
        print(f"‚úÖ {len(quality_videos)} videos passed quality check")
        
        # Step 2: Remove duplicates
        print("\nüîç Step 2: Duplicate detection...")
        final_videos = self.filter_duplicates(quality_videos)
        
        print(f"\nüéâ Final result: {len(final_videos)} unique, high-quality videos ready to add!")
        
        return final_videos


if __name__ == "__main__":
    # Test the content filter
    filter_system = ContentFilter()
    
    # Test similarity
    text1 = "Review phim Avengers Endgame - C√°i k·∫øt ho√†n h·∫£o"
    text2 = "ƒê√°nh gi√° phim Avengers: Endgame - K·∫øt th√∫c tuy·ªát v·ªùi"
    
    similarity = filter_system.calculate_text_similarity(text1, text2)
    print(f"Similarity: {similarity:.2f}")
    
    # Test movie extraction
    movie1 = filter_system.extract_movie_name(text1)
    movie2 = filter_system.extract_movie_name(text2)
    print(f"Movie 1: {movie1}")
    print(f"Movie 2: {movie2}")