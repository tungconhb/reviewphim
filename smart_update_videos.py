"""
Smart Update Videos - C·∫≠p nh·∫≠t to√†n b·ªô video trong DB v·ªõi ph√¢n lo·∫°i AI
"""

import sqlite3
from sentence_transformers import SentenceTransformer, util
from datetime import datetime

# -------------------- C·∫•u h√¨nh m√¥ h√¨nh AI --------------------
model = SentenceTransformer('paraphrase-MiniLM-L3-v2')

AI_GENRES = [
    'H√†nh ƒë·ªông', 'Kinh d·ªã', 'Vi·ªÖn t∆∞·ªüng', 'T√¨nh c·∫£m', 'H√†i h∆∞·ªõc',
    'Ch√≠nh k·ªãch', 'Ho·∫°t h√¨nh', 'Phi√™u l∆∞u', 'T√¢m l√Ω', 'Th·∫ßn tho·∫°i'
]

def analyze_movie_info(title, description, tags=None):
    """Ph√¢n lo·∫°i phim th√¥ng minh b·∫±ng m√¥ h√¨nh ng√¥n ng·ªØ"""
    try:
        tags = tags or []
        text = f"{title} {description or ''} {' '.join(tags)}"
        emb_text = model.encode(text, convert_to_tensor=True)
        emb_genres = model.encode(AI_GENRES, convert_to_tensor=True)
        scores = util.cos_sim(emb_text, emb_genres)
        best_genre = AI_GENRES[int(scores.argmax())]
        return {
            'genre': best_genre,
            'country': 'Unknown',
            'movie_type': 'Unknown',
            'series_name': '',
            'episode_number': 0
        }
    except Exception as e:
        print("‚ö†Ô∏è L·ªói AI ph√¢n lo·∫°i:", e)
        return {
            'genre': 'Unknown',
            'country': 'Unknown',
            'movie_type': 'Unknown',
            'series_name': '',
            'episode_number': 0
        }

# -------------------- C·∫≠p nh·∫≠t DB --------------------
def update_all_videos_in_db():
    conn = sqlite3.connect('db.sqlite')
    cursor = conn.cursor()

    # Ki·ªÉm tra xem c·ªôt c·∫ßn thi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
    cursor.execute("PRAGMA table_info(video_reviews)")
    columns = [row[1] for row in cursor.fetchall()]
    required_columns = ['title', 'description', 'genre', 'country', 'movie_type']
    for col in required_columns:
        if col not in columns:
            raise Exception(f"C·ªôt '{col}' ch∆∞a t·ªìn t·∫°i trong b·∫£ng video_reviews. C·∫ßn t·∫°o tr∆∞·ªõc.")

    # L·∫•y t·∫•t c·∫£ video
    cursor.execute("SELECT id, title, description FROM video_reviews")
    videos = cursor.fetchall()
    updated_count = 0

    print("üîÑ Updating all videos in DB with AI classification...")

    for video in videos:
        video_id, title, description = video
        analysis = analyze_movie_info(title, description)
        try:
            cursor.execute('''
                UPDATE video_reviews
                SET genre = ?, country = ?, movie_type = ?, series_name = ?, episode_number = ?
                WHERE id = ?
            ''', (
                analysis['genre'],
                analysis['country'],
                analysis['movie_type'],
                analysis['series_name'],
                analysis['episode_number'],
                video_id
            ))
            updated_count += 1
            print(f"‚úÖ Updated: {title[:50]}... -> {analysis['genre']}")
        except Exception as e:
            print(f"‚ùå Error updating video {video_id}: {e}")

    conn.commit()
    conn.close()
    print(f"‚úÖ Completed! Total videos updated: {updated_count}")

# -------------------- Ch·∫°y script --------------------
if __name__ == "__main__":
    update_all_videos_in_db()
